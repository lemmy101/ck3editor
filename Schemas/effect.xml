<Schema name="effect" id="effect">
  <Child name="add_dynasty_modifier" scope="dynasty" doc="Add a modifier to a dynasty" function="effect" type="block">
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="add_dynasty_perk" scope="dynasty" type="dynasty_perk" doc="Adds dynasty perk. add_dynasty_perk = key" function="effect"/>
  <Child name="add_dynasty_prestige" scope="dynasty" doc="adds dynasty prestige" type="value" function="effect"/>
  <Child name="add_dynasty_prestige_level" scope="dynasty" doc="adds dynasty prestige levels" type="value" function="effect"/>
  <Child name="remove_all_dynasty_modifier_instances" scope="dynasty" doc="Remove all instances of a modifier from a dynasty" type="bool" function="effect"/>
  <Child name="remove_dynasty_modifier" scope="dynasty" doc="Remove a modifier from a dynasty" function="effect" type="modifier" />
  <Child name="add_house_modifier" scope="dynasty_house" doc="Add a modifier to a house" function="effect" type="block">
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="remove_all_house_modifier_instances" scope="dynasty_house" doc="Remove all instances of a modifier from a house" function="effect" type="bool" />
  <Child name="remove_house_modifier" scope="dynasty_house" doc="Remove a modifier from a house" function="effect" type="modifier" />
  <Child name="add_scheme_modifier" scope="scheme" doc="adds the specified scheme modifier, add_scheme_modifier = { type = X days = Y } (days are optional, the modifier will expire in Y days if specified)" function="effect" type="block" >
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="add_scheme_progress" scope="scheme" doc="Add progress to the scope scheme. (progress is in 0.0 - 100.0 range)" function="effect" type="value" />
  <Child name="end_scheme" scope="scheme" doc="Ends a specific scheme and removes it without any other effect" function="effect" type="bool" />
  <Child name="expose_scheme" scope="scheme" doc="Exposes the scheme to the defender" function="effect" type="bool" />
  <Child name="expose_scheme_agent" scope="scheme" type="character" doc="Exposes the target character as an agent of the current scheme" function="effect" />
  <Child name="remove_scheme_modifier" scope="scheme" doc="removes the specified scheme modifier" function="effect" type="modifier" />
  <Child name="scheme_freeze_days" scope="scheme" doc="scheme_freeze_days = X freezes the scheme for X days (0 unfreezes the scheme)" function="effect" type="value" />
  <Child name="add_county_modifier" scope="landed_title" doc="Add a modifier to a county" function="effect" type="block" >
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="change_county_control" scope="landed_title" doc="Changes the county control of a title. If the title has higher tier than county, the effect will propagate down to all counties below it." function="effect" type="value" />
  <Child name="change_de_jure_drift_progress" scope="landed_title" doc="Change the progress of de jure drift of a title&lt;drifting_title&gt; = { change_de_jure_drift_progress = {   target = &lt;drift_target_title&gt;    values = &lt;progress_change_value&gt; } }" function="effect" type="block">
    <Child name="target" type="landed_title" />
    <Child name="value" type="value" />
  </Child>
  <Child name="change_development_level" scope="landed_title" doc="Changes the development level of a title. If the title has higher tier than county, the effect will propagate down to all counties below it." function="effect" type="value" />
  <Child name="change_development_progress" scope="landed_title" doc="Changes the development progress of a title. If the title has higher tier than county, the effect will propagate down to all counties below it." function="effect" type="value" />
  <Child name="change_development_progress_with_overflow" scope="landed_title" doc="Changes the development progress of a title. If the title has higher tier than county, the effect will propagate down to all counties below it. Will overflow, so adding +100 to a county with 50 progress left will increase the level by 1 and result in 50 progress towards the next level" function="effect" type="value" />
  <Child name="clear_title_laws" scope="landed_title" doc="remove all title laws from the scoped title. DOES NOT apply law removal costs and effects." function="effect" type="bool" />
  <Child name="clear_title_laws_effects" scope="landed_title" doc="remove all title laws from the scoped title. DOES apply law removal costs and effects." function="effect" type="bool" />
  <Child name="copy_title_history" scope="landed_title" type="landed_title" doc="Copy title history from another title" function="effect" />
  <Child name="lease_out_to" scope="landed_title" doc="Lease out the scoped title" function="effect" type="holy_order" />
  <Child name="remove_all_county_modifier_instances" scope="landed_title" doc="Remove all instances of a modifier from a county" function="effect" type="bool" />
  <Child name="remove_county_modifier" scope="landed_title" doc="Remove a modifier from a county" function="effect" type="modifier" />
  <Child name="reset_title_name" scope="landed_title" doc="Sets the name and adjective of the scoped title back to being based on its key. Won't cause the prefix to change" function="effect" type="localized" />
  <Child name="reset_title_prefix" scope="landed_title" doc="Sets the prefix of the scoped title back to being based on its key. Won't cause its adjective or name to change" function="effect" type="localized" />
  <Child name="revoke_lease" scope="landed_title" doc="Revoke the lease of the scoped title" function="effect" type="bool" />
  <Child name="set_always_follows_primary_heir" scope="landed_title" doc="Sets if the title should always go to the primary heir in partition succession" function="effect" type="bool" />
  <Child name="set_capital_county" scope="landed_title" type="landed_title" doc="Sets the capital county of the title to the target county" function="effect" />
  <Child name="set_color_from_title" scope="landed_title" type="landed_title" doc="Sets the color of the title to the same as the target title (shifted very slightly to not be identical)" function="effect" />
  <Child name="set_county_culture" scope="landed_title" doc="sets the culture of a county" function="effect" type="culture" />
  <Child name="set_county_faith" scope="landed_title" doc="Changes what faith a county has" function="effect" type="faith" />
  <Child name="set_de_jure_liege_title" scope="landed_title" type="landed_title" doc="Set a new DeJure liege title" function="effect" />
  <Child name="set_definitive_form" scope="landed_title" doc="Sets if the title should use a definitive form name (no 'Kingdom of')" function="effect" type="bool" />
  <Child name="set_delete_on_destroy" scope="landed_title" doc="Sets if the title should be deleted from the gamestate completely when it is destroyed. set_delete_on_destroy = yes" function="effect" type="bool" />
  <Child name="set_destroy_if_invalid_heir" scope="landed_title" doc="Sets if the title should be destroyed on succession if there's no heir matching its restrictions. set_destroy_if_invalid_heir = yes" function="effect" type="bool" />
  <Child name="set_destroy_on_succession" scope="landed_title" doc="Sets if the title should be destroyed on succession. set_destroy_on_succession = yes" function="effect" type="bool" />
  <Child name="set_landless_title" scope="landed_title" doc="Sets if the title is landless (can be held by rulers with no land)" function="effect" type="bool" />
  <Child name="set_no_automatic_claims" scope="landed_title" doc="Sets if the title should disallow automatic claims (meaning claims will only be added by script, and by pressed claims being inherited)." function="effect" type="bool" />
  <Child name="set_title_name" scope="landed_title" doc="sets the name (localization key) of the scoped title. The adjective will be constructed by adding '_adj' to the localisation key. Won't cause the prefix to change" function="effect" type="localized" />
  <Child name="set_title_prefix" scope="landed_title" doc="sets the prefix of the scoped title. Won't cause its name or adjective to change" function="effect" type="localized" />
  <Child name="title_create_faction" scope="landed_title" doc="the scoped landed title creates a faction of the specified type against the specified target, title_create_faction = { type = X target = Y }" function="effect" type="block" >
    <Child name="target" type="character" />
    <Child name="type" type="faction_type" />
  </Child>
  <Child name="title_join_faction" scope="landed_title" doc="the landed title in the scope joins the assigned faction" function="effect" type="faction" />
  <Child name="title_leave_faction" scope="landed_title" doc="the title in the scope leaves the assigned faction" function="effect" type="faction" />
  <Child name="end_story" scope="story_cycle" doc="Ends a story and executes it's on_end effect, the story can no longer be accessed after this" function="effect" type="bool" />
  <Child name="make_story_owner" scope="story_cycle" type="character" doc="= character_target  makes the character the new owner of the story" function="effect" />
  <Child name="add_innovation" scope="culture" doc="Add innovation to a culture" function="effect" type="innovation" />
  <Child name="add_random_innovation" scope="culture" doc="Add random available innovation&lt;culture&gt; = { add_random_innovation = culture_group_military/culture_group_civic/culture_group_regional/yes }" function="effect" type="culture_group" />
  <Child name="get_all_innovations_from" scope="culture" type="culture" doc="Discover all innovations from the target culture" function="effect" />
  <Child name="get_random_innovation_from" scope="culture" doc="Get random available innovation from another culture" function="effect" type="culture" />
  <Child name="add_character_flag" scope="character" doc="adds a character flag" function="effect" type="block">
    <Child name="flag" type="character_flag" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="add_character_modifier" scope="character" doc="Add a modifier to a character" function="effect" type="block" >
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="add_courtier" scope="character" type="character" doc="Add the target character to the scope character's court" function="effect" />
  <Child name="add_diplomacy_lifestyle_perk_points" scope="character" doc="Adds lifestyle per points to the given character" function="effect" type="value" />
  <Child name="add_diplomacy_lifestyle_xp" scope="character" doc="Adds lifestyle XP to the given character" function="effect" type="value" />
  <Child name="add_dread" scope="character" doc="adds (or removes) dread to a character" function="effect" type="value" />
  <Child name="add_gold" scope="character" doc="adds gold to a character" function="effect" type="value" />
  <Child name="add_hook" scope="character" doc="Adds a hook on a character" function="effect" type="hook" />
  <Child name="add_hook_no_toast" scope="character" doc="Adds a hook on a character" function="effect" type="hook" />
  <Child name="add_intrigue_lifestyle_perk_points" scope="character" doc="Adds lifestyle per points to the given character" function="effect" type="value" />
  <Child name="add_intrigue_lifestyle_xp" scope="character" doc="Adds lifestyle XP to the given character" function="effect" type="value" />
  <Child name="add_joined_faction_discontent" scope="character" doc="add_joined_faction_discontent = X adds (or subtracts) discontent to the factions the scope character is in" function="effect" type="value" />
  <Child name="add_knows_of_killer" scope="character" type="character" doc="Adds the right hand side character as knowing of the killer of the scoped object" function="effect" />
  <Child name="add_learning_lifestyle_perk_points" scope="character" doc="Adds lifestyle per points to the given character" function="effect" type="value" />
  <Child name="add_learning_lifestyle_xp" scope="character" doc="Adds lifestyle XP to the given character" function="effect" type="value" />
  <Child name="add_martial_lifestyle_perk_points" scope="character" doc="Adds lifestyle per points to the given character" function="effect" type="value" />
  <Child name="add_martial_lifestyle_xp" scope="character" doc="Adds lifestyle XP to the given character" function="effect" type="value" />
  <Child name="add_opinion" scope="character" doc="Adds a temporary opinion modifier, add_opinion = { modifier = X days/months/years = Y target = Z }" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="modifier" type="opinion"/>
    <Child name="opinion" type="num"/>
    <Child name="days" type="num"/>
    <Child name="months" type="num"/>
    <Child name="years" type="num"/>
  </Child>
  <Child name="add_perk" scope="character" doc="Adds the perk for this character" function="effect" type="perk" />
  <Child name="add_piety" scope="character" doc="gives (or takes) piety to a character" function="effect" type="value" />
  <Child name="add_piety_experience" scope="character" doc="gives (or takes) piety experience to a character" function="effect" type="value" />
  <Child name="add_piety_level" scope="character" doc="increases (or decreases) the piety level of a character" function="effect" type="value" />
  <Child name="add_pressed_claim" scope="character" type="landed_title" doc="gives a pressed claim to a character" function="effect" />
  <Child name="add_prestige" scope="character" doc="gives (or takes) prestige to a character" function="effect" type="value" />
  <Child name="add_prestige_experience" scope="character" doc="gives (or takes) prestige experience to a character" function="effect" type="value" />
  <Child name="add_prestige_level" scope="character" doc="increases (or decreases) the prestige level of a character" function="effect" type="value" />
  <Child name="add_realm_law" scope="character" doc="Adds the given law to the scoped character" function="effect" type="law" />
  <Child name="add_realm_law_skip_effects" scope="character" doc="Adds the given law to the scoped character. Skips the cost and the pass effect, and the revoke effects of the current law" function="effect" type="law" />
  <Child name="add_relation_flag" scope="character" doc="Adds a flag to an existing relation" function="effect" type="block">
    <Child name="relation" type="relation_type"/>
    <Child name="target" type="character"/>
    <Child name="flag" type="flag"/>
  </Child>
  <Child name="add_scheme_cooldown" scope="character" doc="Sets a scheme cooldown for the scope character towards = { target=target_character function=scheme_type days/weeks/months/years = duration }" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="function" type="scheme_type"/>
    <Child name="days" type="value"/>
    <Child name="months" type="value"/>
    <Child name="years" type="value"/>
  </Child>
  <Child name="add_secret" scope="character" doc="Adds a secret" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="type" type="secret_type"/>

  </Child>
  <Child name="add_stewardship_lifestyle_perk_points" scope="character" doc="Adds lifestyle per points to the given character" function="effect" type="value" />
  <Child name="add_stewardship_lifestyle_xp" scope="character" doc="Adds lifestyle XP to the given character" function="effect" type="value" />
  <Child name="add_stress" scope="character" doc="increases (or decreases) stress of a character" function="effect" type="value" />
  <Child name="add_targeting_factions_discontent" scope="character" doc="add_targeting_factions_discontent = X adds (or subtracts) discontent to all the factions that are targeting the scope character" function="effect" type="value" />
  <Child name="add_to_scheme" scope="character" doc="Adds a character as an agent to the scheme" function="effect" type="value" />
  <Child name="add_trait" scope="character" doc="Adds a trait to a character (the trait will not be added and no tooltip will be shown if the character isn't eligible for the trait, i.e. when already having the trait, having an opposing trait, not fulfilling the trait's is_potential trigger or being outside of the trait's range)" function="effect" type="trait" />
  <Child name="add_trait_force_tooltip" scope="character" doc="Adds a trait to a character (if the add_trait effect would not add the trait - i.e. when already having the trait, having an opposing trait, not fulfilling the trait's is_potential trigger or being outside of the trait's range - a tooltip will be shown but the trait will not be added)" function="effect" type="trait" />
  <Child name="add_truce_both_ways" scope="character" doc="Sets the both-way truce against the specified character" function="effect" type="block">
    <Child name="character" type="character"/>
    <Child name="days" type="value"/>
    <Child name="war" type="war"/>
    <Child name="result" type="war_outcome"/>
  </Child>
  <Child name="add_truce_one_way" scope="character" doc="Sets the truce against the specified character" function="effect" type="block">
    <Child name="character" type="character"/>
    <Child name="days" type="value"/>
    <Child name="war" type="war"/>
    <Child name="result" type="war_outcome"/>
  </Child>
  <Child name="add_tyranny" scope="character" doc="adds (or removes) tyranny to (or from) a character" function="effect" type="value" />
  <Child name="add_unpressed_claim" scope="character" type="landed_title" doc="gives an unpressed claim to a character" function="effect" />
  <Child name="add_visiting_courtier" scope="character" type="character" doc="Add the target character as the scope character's guest" function="effect" />
  <Child name="allow_alliance" scope="character" type="character" doc="Allows (previously broken) alliance with the target character" function="effect" />
  <Child name="allow_in_scheme" scope="character" doc="Allow the character to join the scheme as an agent" function="effect" type="scheme" />
  <Child name="apply_ai_vassal_obligation_liege_most_desired" scope="character" doc="Apply the new level for the most desired AI obligation level the liege in the contract wants" function="effect" type="bool" />
  <Child name="apply_ai_vassal_obligation_vassal_most_desired" scope="character" doc="Apply the new level for the most desired AI obligation level the vassal in the contract wants" function="effect" type="bool" />
  <Child name="assign_council_task" scope="character" doc="Assigns the target character to the council task" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="council_task" type="council_task"/>
  </Child>
  <Child name="assign_councillor_type" scope="character" doc="Assigns the target character to the first available council position of the type available. { type = council_position_type_key target = character_taking_the_position fire_on_actions = [yes] }" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="type" type="councillor_type"/>
  </Child>
  <Child name="banish" scope="character" doc="The character gets banished." function="effect" type="bool" />
  <Child name="becomes_independent" scope="character" doc="becomes and independent ruler. becomes_independent = { change = 'previously created title_and_vassal_change'" function="effect" type="block">
    <Child name="change" type="title_and_vassal_change"/>
  </Child>
  <Child name="break_alliance" scope="character" type="character" doc="Breaks the alliance with the target character" function="effect" />
  <Child name="cancel_truce_both_ways" scope="character" type="character" doc="Ends the truce against the specified character, and theirs against the scoped character. cancel_truce_both_ways = scope:character" function="effect" />
  <Child name="cancel_truce_one_way" scope="character" type="character" doc="Ends the truce against the specified character. cancel_truce_one_way = scope:character" function="effect" />
  <Child name="change_current_weight" scope="character" doc="Change the current weight of the scoped character" function="effect" type="value" />
  <Child name="change_first_name" scope="character" doc="Change the first name of a character" function="effect" type="string" />
  <Child name="change_government" scope="character" doc="changes the government of a character" function="effect" type="government" />
  <Child name="change_liege" scope="character" doc="= { liege = 'Character that should become the new liege' change = 'previously created title_and_vassal_change', adds a liege change" function="effect" type="block">
    <Child name="liege" type="character"/>
    <Child name="change" type="title_and_vassal_change"/>
  </Child>
  <Child name="change_prison_type" scope="character" doc="Changes the charater's prison type. Scoped character is the prisoner. Accepts any static modifier (see also improson effect)." function="effect" type="prison_type" />
  <Child name="change_target_weight" scope="character" doc="Change the target weight of the scoped character" function="effect" type="value" />
  <Child name="clear_forced_vote" scope="character" doc="Clears forced voting" function="effect" type="bool" />
  <Child name="consume_banish_reasons" scope="character" type="character" doc="'Consume' all banish reasons that the scoped character has on the target character. Until they get a new reason, they cannot banish the target again." function="effect" />
  <Child name="consume_divorce_reasons" scope="character" type="character" doc="'Consume' all divorce reason that the scoped character has on the target character. Until they get a new reason, they cannot divorce the target again." function="effect" />
  <Child name="consume_execute_reasons" scope="character" type="character" doc="'Consume' all execute reasons that the scoped character has on the target character. Until they get a new reason, they cannot execute the target again." function="effect" />
  <Child name="consume_imprisonment_reasons" scope="character" type="character" doc="'Consume' all imprisonment reasons that the scoped character has on the target character. Until they get a new reason, they cannot imprison the target again." function="effect" />
  <Child name="consume_revoke_title_reason" scope="character" type="character" doc="'Consume' 1 revoke title reason that the scoped character has on the target character." function="effect" />
  <Child name="copy_inheritable_appearance_from" scope="character" type="character" doc="copies the inheritable appearance attributes (inheritable genes in the character's DNA string) from the target character to the scoped character" function="effect" />
  <Child name="create_alliance" scope="character" doc="Create an alliance between the scoped character and the target. The allied through characters determine who gets checked against for if the alliance should persist or not." function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="allied_through_owner" type="character"/>
    <Child name="allied_through_target" type="character"/>
  </Child>
  <Child name="create_cadet_branch" scope="character" doc="The scope character creates a cadet branch of the house he is in [yes|no]" function="effect" type="bool" />
  <Child name="create_faction" scope="character" doc="the scoped character creates a faction of the specified type against the specified target, create_faction = { type = X target = Y }" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="type" type="faction_type"/>
  </Child>
  <Child name="create_story" scope="character" doc="creates and initializes a story cycle with the current character as owner" function="effect" type="story_cycle" />
  <Child name="death" scope="character" doc="kills a character, death = { killer = X death_reason = Y }, where X is a character and Y is one of the death reason keys. Or death = natural which will pick a natural death reason to kill the character from." function="effect" type="block" >
    <Child name="killer" type="character"/>
    <Child name="death_reason" type="death_reason"/>
  </Child>

  <Child name="depose" scope="character" doc="The character gets deposed." function="effect" type="bool" />
  <Child name="destroy_title" scope="character" type="landed_title" doc="Destroys a title" function="effect" />
  <Child name="end_pregnancy" scope="character" doc="end a pregnancy" function="effect" type="bool" />
  <Child name="execute_decision" scope="character" doc="Execute the specified decision for the scoped character" function="effect" type="decision" />
  <Child name="finish_council_task" scope="character" doc="The councillor finish the current assigned task successfully." function="effect" type="bool" />
  <Child name="fire_councillor" scope="character" type="character" doc="The scope character fires the target character form teh council." function="effect" />
  <Child name="forbid_from_scheme" scope="character" doc="Forbid the scope character from joining the target scheme as an agent (and kick the character out if already in the scheme)" function="effect" type="scheme" />
  <Child name="force_add_to_scheme" scope="character" doc="Adds a character as an agent to the scheme and forces them to stay" function="effect" type="block" >
    <Child name="scheme" type="scheme"/>
    <Child name="days" type="value"/>
    <Child name="months" type="value"/>
    <Child name="years" type="value"/>
  </Child>
  <Child name="force_vote_as" scope="character" doc="Forces the character to vote the same as the target" function="effect" type="block"  >
    <Child name="target" type="character"/>
    <Child name="days" type="value"/>
    <Child name="months" type="value"/>
    <Child name="years" type="value"/>
  </Child>
  <Child name="get_title" scope="character" type="landed_title" doc="gives a title to a character" function="effect" />
  <Child name="give_nickname" scope="character" doc="Give a nickname to this character" function="effect" type="nickname" />
  <Child name="imprison" scope="character" doc="Imprisons the target character as this character's prisoner, imprison = { target = X reason = Y type = Z }, where X is a character, Y is a flag, Z is a static modifier" function="effect" type="block"  >
    <Child name="target" type="character"/>
    <Child name="reason" type="flag"/>
    <Child name="type" type="prison_type"/>
  </Child>
  <Child name="join_faction" scope="character" doc="the character in the scope joins the assigned faction" function="effect" type="faction" />
  <Child name="join_faction_forced" scope="character" doc="the character in the scope is forced to join a faction by a character for a defined time," function="effect" type="block"  >
    <Child name="faction" type="faction"/>
    <Child name="forced_by" type="character"/>
    <Child name="years" type="value"/>
  </Child>
  <Child name="join_faction_skip_check" scope="character" doc="the character in the scope joins the assigned faction skiping the can_character_join trigger" function="effect" type="faction" />
  <Child name="leave_faction" scope="character" doc="the charcter in the scope leaves the assigned faction" function="effect" type="faction" />
  <Child name="make_claim_strong" scope="character" type="landed_title" doc="makes a claim strong (character adds the claim if not having it already)" function="effect"  />
  <Child name="make_claim_weak" scope="character" type="landed_title" doc="makes a claim weak (character adds the claim if not having it already)" function="effect" />
  <Child name="make_concubine" scope="character" type="character" doc="Makes the target character a concubine of the scope character, the target should not be imprisoned" function="effect" />
  <Child name="make_pregnant" scope="character" doc="makes a character pregnant" function="effect" type="block" >
    <Child name="father" type="character"/>
  </Child>
  <Child name="make_trait_active" scope="character" doc="Activates an inactive trait. Tooltip will not be shown if the character cannot have the trait." function="effect" type="trait" />
  <Child name="make_trait_active_force_tooltip" scope="character" doc="Activates an inactive trait. Tooltip will be shown even if the character cannot have the trait." function="effect" type="trait" />
  <Child name="make_trait_inactive" scope="character" doc="Makes a current trait of a character inactive. Tooltip will not be shown if the character doesn't have the trait." function="effect" type="trait" />
  <Child name="make_trait_inactive_force_tooltip" scope="character" doc="Makes a current trait of a character inactive. Tooltip will be shown even if the character doesn't have the trait." function="effect" type="trait" />
  <Child name="make_unprunable" scope="character" doc="The scope character will no longer be prunable after their death. Use with care, as this will make everyone related to them unprunable too. So you should only use this if someone absolutely *needs* to stick around several years after their death. Example: make_unprunable = yes" function="effect" type="bool" />
  <Child name="marry" scope="character" type="character" doc="Marries the scoped character to the target character" function="effect" />
  <Child name="marry_matrilineal" scope="character" type="character" doc="Marries the scoped character to the target character matrilineally" function="effect" />
  <Child name="move_to_pool" scope="character" doc="The scoped character (courtier or guest) leaves their current court and moves into the pool" function="effect" type="bool" />
  <Child name="move_to_pool_at" scope="character" type="province" doc="The scoped character (courtier/guest/pool character) leaves their current court (if any) and moves into the pool of the specified province" function="effect" />
  <Child name="pay_long_term_gold" scope="character" doc="the scope character pays gold to the target character, pay_gold = { target = X gold = Y } (AI budget category long term)" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="gold" type="value"/>
  </Child>
  <Child name="pay_long_term_income" scope="character" doc="the scope character immediately pays gold corresponding to their income to the target character, pay_income = { target = X days/months/years = Y } (AI budget long term)" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="days" type="value"/>
    <Child name="months" type="value"/>
    <Child name="years" type="value"/>
  </Child>

  <Child name="pay_short_term_gold" scope="character" doc="the scope character pays gold to the target character, pay_gold = { target = X gold = Y } (AI budget category short term)" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="gold" type="value"/>
  </Child>
  <Child name="pay_short_term_income" scope="character" doc="the scope character immediately pays gold corresponding to their income to the target character, pay_income = { target = X days/months/years = Y } (AI budget short term)" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="days" type="value"/>
    <Child name="months" type="value"/>
    <Child name="years" type="value"/>
  </Child>

  <Child name="play_music_cue" scope="character" doc="Plays the specified music cue." function="effect" type="string" />
  <Child name="recalculate_scripted_relation" scope="character" doc="Recalculates the effect of a scripted relation" function="effect" type="relation_type" />
  <Child name="recruit_courtier" scope="character" type="character" doc="Recruits the target to become a courtier. Example scope:liege = { recruit_courtier = scope:new_courtier }" function="effect" />
  <Child name="refund_all_perks" scope="character" doc="Refunds all perks of the character. Example: refund_all_perks = yes" function="effect" type="bool" />
  <Child name="refund_perks" scope="character" doc="Refunds all perks of the RHS lifestyle. Example: refund_perks = intrigue_lifestyle" function="effect" type="lifestyle" />
  <Child name="release_from_prison" scope="character" doc="releases the character from the prison, imprison = X, where X is a boolean value" function="effect" type="bool" />
  <Child name="remove_all_character_modifier_instances" scope="character" doc="Remove all instances of a modifier from a character" function="effect" type="bool" />
  <Child name="remove_character_flag" scope="character" doc="removes a character flag" function="effect" type="character_flag" />
  <Child name="remove_character_modifier" scope="character" doc="Remove a modifier from a character" function="effect" type="modifier" />
  <Child name="remove_claim" scope="character" type="landed_title" doc="removes an explicit (not from a living parent/grand parent) claim" function="effect" />
  <Child name="remove_concubine" scope="character" type="character" doc="Removes the target character as a concubine of the scope character" function="effect" />
  <Child name="remove_courtier_or_guest" scope="character" type="character" doc="Removes the target character (guest or courtier) from the scope character's court" function="effect" />
  <Child name="remove_decision_cooldown" scope="character" doc="Remove the cooldown on taking a decision for the scoped character" function="effect" type="decision" />
  <Child name="remove_hook" scope="character" doc="Removes a hook on a character, remove_hook = { target = X, type = Y }, if type is specified, the hook will only be removed if it is of that type" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="type" type="hook"/>
  </Child>
  <Child name="remove_interaction_cooldown" scope="character" doc="Remove the cooldown on using an interaction for the scoped character" function="effect" type="interaction" />
  <!--<Child name="remove_interaction_cooldown_against" scope="character" doc="Remove the cooldown on using an interaction against the target character for the scoped character" function="effect" type="" />-->
  <Child name="remove_long_term_gold" scope="character" doc="removes gold from a character (AI's long term budget)" function="effect" type="value" />
  <Child name="remove_nickname" scope="character" doc="Removes any nickname from the current character [yes|no]" function="effect" type="nickname" />
  <Child name="remove_opinion" scope="character" doc="Removes a temporary opinion modifier, remove_opinion = { target = X modifier = Y single = Z (no by default) } where X is a character, Y is the opinion modifier, Z tells whether to remove all instances of the modifier or just one" function="effect" type="block"  >
    <Child name="target" type="character"/>
    <Child name="modifier" type="modifier"/>
  </Child>
  <Child name="remove_perk" scope="character" doc="Remove the perk for this character" function="effect" type="perk" />
  <Child name="remove_realm_law" scope="character" doc="Removes the given law from the scoped character. This will leave the law group empty, so only do this if you're getting rid of a law group" function="effect" type="law" />
  <Child name="remove_relation_best_friend" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_bully" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_court_physician" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_crush" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_flag" scope="character" doc="Removed a flag from an existing relation flag = flag_name (declared in scripted_relation) target = other_character relation = scripted_relation" function="effect" type="block">
    <Child name="target" type="character"/>
    <Child name="relation" type="relation_type"/>
    <Child name="flag" type="flag"/>
  </Child>
  <Child name="remove_relation_friend" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_guardian" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_intrigue_mentor" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_intrigue_student" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_lover" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_mentor" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_nemesis" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_oaf" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_potential_friend" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_potential_lover" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_potential_rival" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_rival" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_soldier_friend" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_soulmate" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_student" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_victim" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
  <Child name="remove_relation_ward" scope="character" type="character" doc="Removes scripted relationship" function="effect" />
 <!-- <Child name="remove_scheme_cooldown_against" scope="character" doc="Remove the cooldown on using a scheme against the target character for the scoped character" function="effect" type="" />-->
  <Child name="remove_short_term_gold" scope="character" doc="removes gold from a character (AI's short term budget)" function="effect" type="value" />
  <Child name="remove_trait" scope="character" doc="Removes a trait from a character. Tooltip will not be shown if the character doesn't have the trait." function="effect" type="trait" />
  <Child name="remove_trait_force_tooltip" scope="character" doc="Removes a trait from a character. Tooltip will be shown even if the character doesn't have the trait." function="effect" type="trait" />
  <Child name="reset_beneficiary" scope="character" doc="The target character stops having a beneficiary. reset_beneficiary = yes" function="effect" type="bool" />
  <Child name="return_to_court" scope="character" doc="Returns the scope character to the employers court." function="effect" type="bool" />
  <Child name="reverse_add_opinion" scope="character" doc="Adds a temporary reverse opinion modifier, reverse_add_opinion = { modifier = X days/months/years = Y target = Z }" function="effect" type="block" >
    <Child name="target" type="character"/>
    <Child name="modifier" type="opinion"/>
    <Child name="opinion" type="num"/>
    <Child name="days" type="num"/>
    <Child name="months" type="num"/>
    <Child name="years" type="num"/>
  </Child>
<!--  <Child name="scriptedtests_recalculate_character_modifier" scope="character" doc="Recalculates the modifier of the scoped character" function="effect" type="" />
  <Child name="scriptedtests_recalculate_succession" scope="character" doc="Recalculates the line of succession of the scoped character" function="effect" type="" />-->
  <Child name="send_interface_message" scope="character" doc="Sends a message to the player playing the character in the scope and then executes any effects inside." function="effect" type="block" inherits="effect" >
    <Child name="type" type="event_type"/>
    <Child name="title" type="localized"/>
    <Child name="right_icon" type="character"/>
    <Child name="left_icon" type="character"/>
  </Child>
  <Child name="send_interface_toast" scope="character" doc="Sends a message to the player playing the character in the scope and then executes any effects inside." function="effect" type="block" inherits="effect" >
    <Child name="type" type="event_type"/>
    <Child name="title" type="localized"/>
    <Child name="right_icon" type="character"/>
    <Child name="left_icon" type="character"/>
  </Child>
  <Child name="set_absolute_country_control" scope="character" doc="Sets if this character has absolute country control, unlock_character_movement = yes/no/boolean event target" function="effect" type="bool" />
  <Child name="set_beneficiary" scope="character" type="character" doc="The target character becomes the beneficiary of the scoped character. set_beneficiary = some character" function="effect" />
  <Child name="set_character_faith" scope="character" type="faith" doc="Changes what faith a character has executing the effects for it. For history setup use 'set_character_faith_history' instead." function="effect" />
  <Child name="set_character_faith_history" scope="character" type="faith" doc="Changes what faith a character has NOT executing the effects for it. USE ONLY IN HISOTRY SETUP!" function="effect"/>
  <Child name="set_character_faith_with_conversion" scope="character" type="faith" doc="Changes what faith a character has, as if they used the faith-view interaction (minus the piety cost). So vassals who'd accept will get converted, as will capitals" function="effect" />
  <Child name="set_child_of_concubine_on_pregnancy" scope="character" doc="Sets the child to be (or not be) a child of a concubine during pregnancy" function="effect" type="bool" />
  <Child name="set_council_task" scope="character" doc="Sets the task of the scope councillor { task_type = council_position_type_key target = for_targeted_tasks  }" function="effect" type="block">
    <Child name="task_type" type="council_task"/>
    <Child name="target" type="character"/>
  </Child>
  <Child name="set_culture" scope="character" type="culture" doc="Set the culture for this character" function="effect" />
  <Child name="set_culture_same_as" scope="character" type="character" doc="sets the culture of the character to be the same as the culture of the target" function="effect" />
  <Child name="set_death_reason" scope="character" doc="sets the death reason and the killer of a dead character, set_death_reason = { killer = X death_reason = Y }, both parameters are optional" function="effect" type="block">
    <Child name="killer" type="character"/>
    <Child name="death_reason" type="death_reason"/>
  </Child>  
  <Child name="set_default_education" scope="character" doc="Set the default education focus for this character" function="effect" type="bool" />
  <Child name="set_designated_heir" scope="character" type="character" doc="Sets the given character as designated heir" function="effect" />
  <Child name="set_employer" scope="character" type="character" doc="Add the scope character to the target character's court" function="effect" />
  <Child name="set_father" scope="character" type="character" doc="sets the father of a character" function="effect"  />
  <Child name="set_focus" scope="character" doc="Set the focus for this character" function="effect" type="focus" />
  <Child name="set_house" scope="character" type="dynasty_house" doc="Sets the dynasty house of the character" function="effect" />
  <Child name="set_immortal_age" scope="character" doc="Changes what age the character became immortal at. Only works if already immortal" function="effect" type="value" />
  <Child name="set_killer_public" scope="character" doc="Sets the scoped character's killer as being publicly known" function="effect" type="bool" />
  <Child name="set_known_bastard_on_pregnancy" scope="character" doc="Sets the child to a known or unknown bastard during pregnancy" function="effect" type="bool" />
  <Child name="set_num_pregnancy_children" scope="character" doc="Set the number of children" function="effect" type="value" />
  <Child name="set_override_designated_winner" scope="character" doc="The scoped character will put their beneficiary on the throne if they're the #1 participant if this is called with 'yes'. Call with 'no' to turn it off again. set_override_designate_winner = yes/no" function="effect" type="bool" />
  <Child name="set_player_character" scope="character" type="character" doc="The scope character's player will now play as the target character. Scope must be player-controlled. Target cannot be player-controlled. Example: make_unprunable = yes" function="effect"/>
  <Child name="set_pregnancy_assumed_father" scope="character" type="character" doc="Set the assumed father of the pregnancy" function="effect"  />
  <Child name="set_primary_spouse" scope="character" type="character" doc="Set the primary spouse of a character" function="effect"  />
  <Child name="set_primary_title_to" scope="character" type="landed_title" doc="Sets the primary title for a character" function="effect"  />
  <Child name="set_real_father" scope="character" type="character" doc="Changes the real father of the character scope" function="effect" />
  <Child name="set_realm_capital" scope="character" type="landed_title" doc="Set a new realm capital" function="effect" />
  <Child name="set_relation_best_friend" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_bully" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_court_physician" scope="character" type="character" doc="Sets scripted relationship" function="effect"/>
  <Child name="set_relation_crush" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_friend" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_relation_guardian" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_intrigue_mentor" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_intrigue_student" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_lover" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_mentor" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_nemesis" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_relation_oaf" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_potential_friend" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_potential_lover" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_relation_potential_rival" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_relation_rival" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_soldier_friend" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_soulmate" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_student" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_relation_victim" scope="character" type="character" doc="Sets scripted relationship" function="effect" />
  <Child name="set_relation_ward" scope="character" type="character" doc="Sets scripted relationship" function="effect"  />
  <Child name="set_sexuality" scope="character" doc="Sets the sexuality of the character" function="effect" type="sexuality" />
  <Child name="set_to_lowborn" scope="character" doc="Set the character to lowborn" function="effect" type="bool" />
  <Child name="set_vassal_contract_modification_blocked" scope="character" doc="Blocks the vassal contract from being modified with regards to being checked by 'vassal_contract_is_blocked_from_modification'" function="effect" type="bool" />
  <Child name="spawn_army" scope="character" doc="Spawns an army for this character. If the character is not at war, the regiments will be created, but the army will not be spawned." function="effect" type="block">
    <Child name="name" type="localized"/>
    <Child name="levies" type="value"/>
    <Child name="men_at_arms" type="block">
      <Child name="type" type="regiment_type"/>
      <Child name="stacks" type="value"/>
    </Child>
    <Child name="location" type="province"/>
    <Child name="uses_supply" type="bool"/>
    <Child name="war" type="war"/>
    <Child name="inheritable" type="bool"/>
  </Child>
  <Child name="start_default_task" scope="character" doc="Force the Councillor to revert to the default task. Any relevant percentage progress will be lost (even if the councillor was performing the default task already)." function="effect" type="bool" />
  <Child name="start_scheme" scope="character" doc="starts a scheme  = { type = X target = Y }" function="effect" type="block">
    <Child name="type" type="scheme_type"/>
    <Child name="target" type="character"/>
  </Child>
  <Child name="start_war" scope="character" doc="starts a war  = { casus_belli/cb = X target = Y claimant = Z target_title = W1 target_title = W2 ... } where X is a casus belli type, Y is the target character, Z i the (optional) claimant, W1, W2.... are targeted titles." function="effect" type="block">
    <Child name="casus_belli" type="casus_belli"/>
    <Child name="cb" type="casus_belli"/>
    <Child name="claimant" type="character"/>
    <Child name="target_title" type="landed_title"/>
  </Child>
  <Child name="stress_impact" scope="character" doc="Stress impact according to specified traits (trait = value), use base = value for a base value that's always added" function="effect" type="block">
    <Child name="trait" type="value" namesFrom="trait"/>
  </Child>
  <Child name="use_hook" scope="character" type="character" doc="Uses a hook a character has (removes if weak, puts on cooldown if strong), use_hook = some_character" function="effect"  />
  <Child name="vassal_contract_decrease_obligation_level" scope="character" doc="decrease the obligation level of the scoped character's vassal contract" function="effect" type="vassal_contract" />
  <Child name="vassal_contract_increase_obligation_level" scope="character" doc="increase the obligation level of the scoped character's vassal contract" function="effect" type="vassal_contract" />
  <Child name="vassal_contract_set_obligation_level" scope="character" doc="change the obligation level of the scoped character's vassal contract" function="effect" type="block">
    <Child name="type" type="vassal_contract"/>
    <Child name="level" type="value"/>
  </Child>
  <Child name="visit_court_of" scope="character" type="character" doc="Add the scope character as the target character's guest" function="effect" />
  <Child name="add_faction_discontent" scope="faction" doc="add_faction_discontent = X adds (or subtracts) discontent to the scope faction" function="effect" type="value" />
  <Child name="destroy_faction" scope="faction" doc="the scope faction is destoryed [yes|no]" function="effect" type="bool" />
  <Child name="faction_remove_war" scope="faction" doc="Removes the war currently associated with the faction" function="effect" type="bool" />
  <Child name="faction_start_war" scope="faction" doc="The scope faction starts the war agains their target." function="effect" type="block" inherits="effect" />
<!--  <Child name="remove_special_character" scope="faction" doc="Removes the special character for the scope faction" function="effect" type="" />
  <Child name="remove_special_title" scope="faction" doc="Removes the special character for the scope faction" function="effect" type="" />-->
  <Child name="set_special_character" scope="faction" type="character" doc="Sets the special character for the scope faction" function="effect" />
  <Child name="set_special_title" scope="faction" type="landed_title" doc="Sets the special title for the scope faction" function="effect" />
  <Child name="add_attacker" scope="war" type="character" doc="adds the target character to the scope war as an attacker" function="effect"  />
  <Child name="add_defender" scope="war" type="character" doc="adds the target character to the scope war as a defender" function="effect" />
  <Child name="end_war" scope="war" doc="ends the war with the specified winner, end_war = attacker/defender/white_peace" function="effect" type="war_outcome" />
  <Child name="remove_participant" scope="war" type="character" doc="removes the target character from the scope war" function="effect" />
  <Child name="set_called_to" scope="war" type="character" doc="sets the target character as already called to the scope war" function="effect" />
  <Child name="set_casus_belli" scope="war" doc="sets the casus belli of the scope war" function="effect" type="casus_belli" />
  <Child name="activate_holy_site" scope="faith" doc="Activate an inactive holy site&lt;faith_scope&gt; = { activate_holy_site = &lt;holy_site_name&gt; }" function="effect" type="holy_site" />
  <Child name="add_doctrine" scope="faith" doc="Add doctrine to faith&lt;faith_scope&gt; = { add_doctrine = &lt;doctrine_name&gt; }" function="effect" type="doctrine" />
  <Child name="change_fervor" scope="faith" doc="Changes the fervor of the faith by the given value. change_fervor = script value" function="effect" type="value" />
  <Child name="remove_doctrine" scope="faith" doc="Remove doctrine from faith&lt;faith_scope&gt; = { remove_doctrine = &lt;doctrine_name&gt; }" function="effect" type="doctrine" />
  <Child name="remove_religious_head_title" scope="faith" doc="Removes the religious head title of the faith" function="effect" type="bool" />
  <Child name="set_religious_head_title" scope="faith" type="landed_title" doc="Sets the religious head title of the faith to the given title. set_religious_head_title = scope" function="effect" />
  <Child name="start_great_holy_war" scope="faith" doc="Starts a great holy war." function="effect" type="block">
    <Child name="target_character" type="character"/>
    <Child name="target_title" type="landed_title"/>
    <Child name="war" type="war"/>
  </Child>
  <Child name="set_add_claim_on_loss" scope="title_and_vassal_change" doc="if set, any title losses will result in claims being added to the previous holder" function="effect" type="bool" />
  <Child name="set_title_and_vassal_change_type" scope="title_and_vassal_change" doc="sets the type of change" function="effect"/>
  <Child name="add_secret_participant" scope="secret" type="character" doc="Adds an participant to the secret" function="effect" />
  <Child name="disable_exposure_by" scope="secret" type="character" doc="Forbids the target character from exposing the secret, disable_exposure_by = target_character" function="effect" />
  <Child name="expose_secret" scope="secret" type="character" doc="Exposes the scope secret" function="effect" />
  <Child name="remove_secret" scope="secret" doc="Removes the scope secret" function="effect" type="bool" />
  <Child name="reveal_to" scope="secret" type="character" doc="Reveals the scope secret to the target character" function="effect"  />
  <Child name="set_secret_owner" scope="secret" type="character" doc="Sets a new owner for the secret" function="effect" />
  <Child name="spend_by" scope="secret" type="character" doc="Spends the scope secret, spend_by = target_character" function="effect" />
  <Child name="generate_coa" scope="landed_title,dynasty,dynasty_house" doc="Generates a coat of arms for the scoped landed title, dynasty or house" function="effect" type="bool" />
  <Child name="reset_coa" scope="landed_title,dynasty,dynasty_house" doc="Rest the coat of arms for the scoped landed title, dynasty or house to its template" function="effect" type="bool" />
  <Child name="set_coa" scope="landed_title,dynasty,dynasty_house" doc="Sets the coat of arms of a landed title, dynasty, or house to the right hand side coat of arms or that of an object of the same type" function="effect" type="coa" />
  <Child name="add_building" scope="province" doc="Add building to the province&lt;province&gt; = { add_building = &lt;building_name&gt; }" function="effect" type="building" />
  <Child name="add_building_slot" scope="province" doc="Add building slot to the province" function="effect" type="value" />
  <Child name="add_province_modifier" scope="province" doc="Add a modifier to a province" function="effect" type="block" >
    <Child name="modifier" type="modifier" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="add_special_building" scope="province" doc="Add a special building to the province (will also add/change a special slot if needed)" function="effect" type="building" />
  <Child name="add_special_building_slot" scope="province" doc="Add a special building slot to the province&lt;province&gt; = { add_special_building_slot = &lt;building_name&gt; }" function="effect" type="building" />
  <Child name="refill_garrison" scope="province" doc="The scoped province gets its garrison refilled. refill_levy = yes/no" function="effect" type="bool" />
  <Child name="refill_levy" scope="province" doc="The scoped province gets its levy refilled. refill_levy = yes/no" function="effect" type="bool" />
  <Child name="remove_all_province_modifier_instances" scope="province" doc="Remove all instances of a modifier from a province" function="effect" type="bool" />
  <Child name="remove_province_modifier" scope="province" doc="Remove a modifier from a province" function="effect" type="modifier" />
  <Child name="set_holding_type" scope="province" doc="Changes the scoped province's holding to another type, removing all buildings that are invalid for the new holding." function="effect" type="holding_type" />
  <Child name="spawn_activity" scope="province" doc="spawns an activity, spawn_activity = { owner = X type = Y days/months/years = Z }, Z is expiration time can be a value or an inclusive &quot;{A B}&quot; interval from which the value will be picked" function="effect" type="block">
    <Child name="owner" type="character" />
    <Child name="type" type="activity" />
    <Child name="days" type="value" />
    <Child name="months" type="value" />
    <Child name="years" type="value" />
  </Child>
  <Child name="accept_invitation_for_character" scope="activity" type="character" doc="accept a characters invitation to the activity" function="effect"  />
  <Child name="decline_invitation_for_character" scope="activity" type="character" doc="decline a characters invitation to the activity" function="effect" />
  <Child name="invite_character_to_activity" scope="activity" type="character" doc="invite a character to the activity" function="effect"/>
  <Child name="add_from_contribution_attackers" scope="casus_belli" doc="Adds prestige, gold and piety based on contribution to allied attackers. parameters: prestige, gold, piety." function="effect" type="block">
    <Child name="prestige" type="value" />
    <Child name="gold" type="value" />
    <Child name="piety" type="value" />
    <Child name="opinion" type="block">
      <Child name="modifier" type="opinion" />
    </Child>
  </Child>

  <Child name="add_from_contribution_defenders" scope="casus_belli" doc="Adds prestige, gold and piety based on contribution to allied defenders. parameters: prestige, gold, piety." function="effect" type="block">
    <Child name="prestige" type="value" />
    <Child name="gold" type="value" />
    <Child name="piety" type="value" />
    <Child name="opinion" type="block">
      <Child name="modifier" type="opinion" />
    </Child>
  </Child>
  <Child name="assign_commander" scope="army" type="character" doc="Assign a commander for the scoped army" function="effect" />
  <Child name="remove_commander" scope="army" doc="Removes the currently assigned commander from the scoped army" function="effect" type="bool" />
  <Child name="add_diplomacy_skill" scope="character" doc="Adds diplomacy skill" function="effect" type="value" />
  <Child name="add_focus_progress" scope="character" doc="Adds focus progress" function="effect" type="value" />
  <Child name="add_internal_flag" scope="none" doc="adds effect to be read internally (no effect in the gamestate)" function="effect" type="internal_flag" />
  <Child name="add_intrigue_skill" scope="character" doc="Adds intrigue skill" function="effect" type="value" />
  <Child name="add_learning_skill" scope="character" doc="Adds learning skill" function="effect" type="value" />
  <Child name="add_martial_skill" scope="character" doc="Adds martial skill" function="effect" type="value" />
  <Child name="add_prowess_skill" scope="character" doc="Adds prowess skill" function="effect" type="value" />
  <Child name="add_stewardship_skill" scope="none" doc="Adds stewardship skill" function="effect" type="value" />
  <Child name="add_title_law" scope="landed_title" doc="add law to scoped title, overriding any current law from the same group. DOES NOT apply law change costs and effects." function="effect" type="law" />
  <Child name="add_title_law_effects" scope="landed_title" doc="add law to scoped title, overriding any current law from the same group. DOES apply law change costs and effects." function="effect" type="law" />
  <Child name="add_to_global_variable_list" scope="none" doc="Adds the event target to a variable list" function="effect" type="block" >
    <Child name="name" type="name" />
    <Child name="target" type="any" />
  </Child>
  <Child name="add_to_list" scope="none" doc="Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the (unbroken) event chain" function="effect" type="list"/>
  <Child name="add_to_local_variable_list" scope="none" doc="Adds the event target to a variable list" function="effect"  type="block" >
    <Child name="name" type="name" />
    <Child name="target" type="any" />
  </Child>
  <Child name="add_to_temporary_list" scope="none" doc="Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the same effect" function="effect"  type="block" >
    <Child name="name" type="name" />
    <Child name="target" type="any" />
  </Child>
  <Child name="add_to_variable_list" scope="none" doc="Adds the event target to a variable list" function="effect"  type="block" >
    <Child name="name" type="name" />
    <Child name="target" type="any" />
  </Child>
  <!--
  <Child name="assert_if" scope="none" doc="Conditionally cause an assert during run time" function="effect" type="" />
  <Child name="assert_read" scope="none" doc="Conditionally cause an assert during read time" function="effect" type="" />-->
  <Child name="break_betrothal" scope="none" type="character" doc="Breaks the betrothal between the scope character to the target character, break_betrothal = target" function="effect" />
  <!--<Child name="break_if" scope="none" doc="conditionally break execution of effects, break_if = { X }, where X is a trigger" function="effect" type="" />-->
  <Child name="change_global_variable" scope="none" doc="Changes the value or a numeric variable" function="effect" type="block">
    <Child name="name" type="name" />
    <Child name="add" type="value" />
    <Child name="subtract" type="value" />
  </Child>
  <Child name="change_local_variable" scope="none" doc="Changes the value or a numeric variable" function="effect" type="block">
    <Child name="name" type="name" />
    <Child name="add" type="value" />
    <Child name="subtract" type="value" />
  </Child>
  <Child name="change_title_holder" scope="landed_title" doc="= {" function="effect" type="block">
    <Child name="holder" type="character" />
    <Child name="change" type="title_and_vassal_change" />
  </Child>
  <Child name="change_title_holder_include_vassals" scope="landed_title" doc="= {" function="effect" type="block">
    <Child name="holder" type="character" />
    <Child name="change" type="title_and_vassal_change" />
  </Child>
  <Child name="change_trait_rank" scope="character" doc="Changes the trait rank = { trait = trait_group rank = change max = maximum new rank }" function="effect" type="block">
    <Child name="trait" type="trait" />
    <Child name="rank" type="value" />
    <Child name="max" type="value" />
  </Child>
  <Child name="change_variable" scope="none" doc="Changes the value or a numeric variable" function="effect" type="block">
    <Child name="name" type="name" />
    <Child name="add" type="value" />
    <Child name="subtract" type="value" />
  </Child>
 <!-- <Child name="clamp_global_variable" scope="none" doc="Clamps a variable the specified max and min" function="effect" type="" />
  <Child name="clamp_local_variable" scope="none" doc="Clamps a variable the specified max and min" function="effect" type="" />
  <Child name="clamp_variable" scope="none" doc="Clamps a variable the specified max and min" function="effect" type="" />-->
  <Child name="clear_global_variable_list" scope="none" doc="Empties the list" function="effect" type="list" />
  <Child name="clear_local_variable_list" scope="none" doc="Empties the list" function="effect" type="list" />
  <Child name="clear_saved_scope" scope="none" doc="Clears a saved scope from the top scope" function="effect" type="scope" />
  <Child name="clear_variable_list" scope="none" doc="Empties the list" function="effect" type="list" />
<!--  <Child name="close_all_views" scope="none" doc="Closes all views. close_all_views = yes" function="effect" type="" />
  <Child name="close_view" scope="none" doc="Tries to close the defined view." function="effect" type="" />-->
  <Child name="complete_activity" scope="activity" doc="completes the activity, complete_activity = yes ends the activity and runs the on_complete effect, complete_activity = no ends the activity without running the effect" function="effect" type="bool" />
  <Child name="create_betrothal" scope="character" type="character" doc="Betroth the scope character to the target character, create_betrothal = target (at least one of the characters need to not be adult)" function="effect" />
  <Child name="create_betrothal_matrilineal" scope="character" type="character" doc="Betroth the scope character to the target character matrilineally, create_betrothal_matrilineal = target (at least one of the characters need to not be adult)" function="effect" />
  <Child name="create_character" scope="none" doc="Creates a character" function="effect" type="block">
    <Child name="template" type="character_template" />
    <Child name="name" type="localized" />
    <Child name="culture" type="culture" />
    <Child name="faith" type="faith" />
    <Child name="employer" type="character" />
    <Child name="mother" type="character" />
    <Child name="father" type="character" />
    <Child name="location" type="province" />
    <Child name="dynasty_house" type="dynasty_house" />
    <Child name="save_scope_as" type="scope" />
  </Child>
  <Child name="create_dynamic_title" scope="none" doc="Creates a dynamic title" function="effect" type="block">
    <Child name="tier" type="tier" />
    <Child name="name" type="localized" />

  </Child>
  <Child name="create_holy_order" scope="none" doc="Create a new holy order" function="effect" type="block">
    <Child name="leader" type="character" />
    <Child name="capital" type="province" />
    <Child name="save_scope_as" type="scope" />
  </Child>
  <Child name="create_title_and_vassal_change" scope="none" doc="starts a title and vassal change and saves it as a temporary event target" function="effect" type="title_and_vassal_change" />
  <Child name="custom_description" scope="none" doc="Wraps effects that get a custom description instead of the auto-generated one" function="effect" type="block" inherits="effect">
    <Child name="text" type="localized" />
  </Child>
  <Child name="custom_description_no_bullet" scope="none" doc="Wraps effects that get a custom description instead of the auto-generated one. Also ensures no bullet point appears" function="effect" type="block" inherits="effect">
    <Child name="text" type="localized" />
  </Child>
  <Child name="custom_label" scope="none" doc="just a tooltip, the scope as object (for grouping, localization)" function="effect" type="localized" />
  <Child name="custom_tooltip" scope="none" doc="just a tooltip, the scope as subject (for grouping, localization)" function="effect" type="localized" />
<!--  <Child name="debug_log" scope="none" doc="Log a string to the debug log when this effect executes, debug_log = message, the message can be a localization string with ROOT, SCOPE and PREV available" function="effect" type="" />
  <Child name="debug_log_date" scope="none" doc="Logs the current date to the debug.log" function="effect" type="" />
  <Child name="debug_log_scopes" scope="none" doc="Log the current scope to the debug log when this effect executes yes = full scope info, no=only current scope" function="effect" type="" />-->
  <Child name="divorce" scope="character" type="character" doc="Divorces the scope character from the target character. divorce = target" function="effect" />
  <Child name="duel" scope="character" doc="duel effect that selects an effect based on comparing specified skill of a character to a value or another character's skill. Alternatively, the compare value can be scripted completely" function="effect" type="block" inherits="effect">
    <Child name="skill" type="skill" />
  </Child>
  <Child name="else" scope="none" doc="Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met" function="effect" type="block" inherits="effect">
  </Child>
  <Child name="else_if" scope="none" doc="Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met" function="effect" type="block" inherits="effect">
    <Child name="limit" type="trigger" />
  </Child>
  <Child name="hidden_effect" scope="none" doc="Effect not shown in tooltips" function="effect" type="block" inherits="effect" />
  <Child name="if" scope="none" doc="Executes enclosed effects if limit criteria are met" function="effect" type="block" inherits="effect">
    <Child name="limit" type="trigger" />
  </Child>
  <Child name="multiply_focus_progress" scope="none" doc="Multiplies focus progress" function="effect" type="value" />
  <!--<Child name="open_interaction_window" scope="none" doc="Tries to open the defined view." function="effect" type="" />
  <Child name="open_view" scope="none" doc="Tries to open the defined view without scope data." function="effect" type="" />
  <Child name="open_view_data" scope="none" doc="Tries to open the defined view with scope data." function="effect" type="" />-->
  <Child name="pan_camera_to_province" scope="none" type="province" doc="Pans the camera to the specified province" function="effect"  />
  <Child name="pan_camera_to_title" scope="none" type="landed_title" doc="Pans the camera to the specified title" function="effect"  />
  <Child name="random" scope="none" doc="a random effect, random = { chance = X modifier = Y effects... }" function="effect" type="block" inherits="effect">
    <Child name="chance" type="value" />
    <Child name="modifier" type="modifier" />
  </Child>
 <!-- <Child name="remove_from_list" scope="none" doc="Removes the current scope from a named list remove_from_list = &lt;string&gt;" function="effect" type="list" />
  <Child name="remove_global_variable" scope="none" doc="Removes a variable" function="effect" type="variable" />
  <Child name="remove_list_global_variable" scope="none" doc="Removes the target from a variable list" function="effect" type="" />
  <Child name="remove_list_local_variable" scope="none" doc="Removes the target from a variable list" function="effect" type="" />
  <Child name="remove_list_variable" scope="none" doc="Removes the target from a variable list" function="effect" type="" />
  <Child name="remove_local_variable" scope="none" doc="Removes a variable" function="effect" type="" />
  <Child name="remove_title_law" scope="none" doc="remove law from scoped title. This will leave the law group empty, so only do this if you're getting rid of a law group. DOES NOT apply law removal costs and effects." function="effect" type="" />
  <Child name="remove_title_law_effects" scope="none" doc="remove law from scoped title. This will leave the law group empty, so only do this if you're getting rid of a law group. DOES apply law removal costs and effects." function="effect" type="" />
  <Child name="remove_variable" scope="none" doc="Removes a variable" function="effect" type="" />
  <Child name="resolve_title_and_vassal_change" scope="none" type="title_and_vassal_change" doc="resolve_title_and_vassal_change = scope:change" function="effect"  />
  <Child name="round_global_variable" scope="none" doc="Rounds a variable to the nearest specified value" function="effect" type="" />
  <Child name="round_local_variable" scope="none" doc="Rounds a variable to the nearest specified value" function="effect" type="" />
  <Child name="round_variable" scope="none" doc="Rounds a variable to the nearest specified value" function="effect" type="" />-->
  <Child name="save_scope_as" scope="none" doc="Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain" function="effect" type="scope" />
  <Child name="save_scope_value_as" scope="none" doc="Saves a numerical or bool value as an arbitrarily-named target to be referenced later in the (unbroken) event chain" function="effect" type="block">
    <Child name="name" type="scope" />
    <Child name="value" type="any" />
  </Child>
  <Child name="save_temporary_scope_as" scope="none" doc="Saves the current scope as an arbitrarily-named temporary target to be referenced later in the same effect" function="effect" type="scope" />
  <Child name="save_temporary_scope_value_as" scope="none" doc="Saves a numerical or bool value as an arbitrarily-named temporary target to be referenced later in the same effect" function="effect" type="block">
    <Child name="name" type="scope" />
    <Child name="value" type="any" />
  </Child>
  <Child name="set_focus_progress" scope="character" doc="Sets focus progress" function="effect" type="value" />
  <Child name="set_generated_asexuality_chance" scope="none" doc="Sets the chance for a generated character to be asexual" function="effect" type="value" />
  <Child name="set_generated_bisexuality_chance" scope="none" doc="Sets the chance for a generated character to be bisexual" function="effect" type="value" />
  <Child name="set_generated_homosexuality_chance" scope="none" doc="Sets the chance for a generated character to be homosexual" function="effect" type="value" />
  <Child name="set_global_variable" scope="none" doc="Sets a variable" function="effect" type="block">
    <Child name="name" type="scope" />
    <Child name="value" type="any" />
  </Child>
  <Child name="set_local_variable" scope="none" doc="Sets a variable" function="effect" type="block">
    <Child name="name" type="scope" />
    <Child name="value" type="any" />
  </Child>
  <Child name="set_trait_rank" scope="none" doc="Sets the trait rank = { trait = trait_group rank = new rank }" function="effect" type="block">
    <Child name="trait" type="trait" />
    <Child name="rank" type="value" />
  </Child>
  <Child name="set_variable" scope="none" doc="Sets a variable" function="effect" type="block">
    <Child name="name" type="scope" />
    <Child name="value" type="any" />
  </Child>
  <!--  <Child name="setup_claim_cb" scope="none" doc="= { attacker = scope:attacker" function="effect" type="" />
  <Child name="setup_de_jure_cb" scope="none" doc="= { attacker = scope:attacker" function="effect" type="" />
  <Child name="setup_invasion_cb" scope="none" doc="= { attacker = scope:attacker" function="effect" type="" />-->
  <Child name="show_as_tooltip" scope="none" doc="Effect only shown in tooltips (but not executed)" function="effect" type="block" inherits="effect" />
 <!-- <Child name="start_tutorial_lesson" scope="none" doc="Starts the tutorial lesson with the given key. Does nothing if the tutorial is not running, the lesson is completed (or already running), or the lesson cannot be triggered (e.g. trigger fails)" function="effect" type="" />
  <Child name="switch" scope="none" doc="Switch on a trigger for the evaluation of another trigger with an optional fallback trigger." function="effect" type="" />-->
  <Child name="trigger_event" scope="none" doc="triggers an event or on_action" function="effect" type="event">
    <Child name="id" type="event" />
    <Child name="on_action" type="on_action" />
    <Child name="days" type="value" />
  </Child>
<!--  <Child name="try_create_important_action" scope="none" doc="Tries to create an important action notification. Will keep the current one if already exists." function="effect" type="" />
  <Child name="try_create_suggestion" scope="none" doc="Tries to create an suggestuib notification. Will keep the current one if already exists." function="effect" type="" />
  <Child name="while" scope="none" doc="Repeats enclosed effects while limit criteria are met or until set iteration count is reached" function="effect" type="" />
  <Child name="battle_event" scope="combat_side" doc="Makes a battle event show up in combat, and the combat result summary. The key is used for loc, with '_friendly' or '_enemy' appended. If this side is not the player's side, the two portraits get flipped. battle_event = { left_portrait = someone right_portrait = someone key = string }" function="effect" type="" />
  <Child name="lose_combat" scope="combat_side" doc="ends the combat as the losing side (doesn't end the combat if evaluated to false)" function="effect" type="" />
  <Child name="win_combat" scope="combat_side" doc="ends the combat as the winning side (doesn't end the combat if evaluated to false)" function="effect" type="" />
  <Child name="change_war_chest_gold" scope="great_holy_war" doc="Changes the amount of gold in the war chest by the given amount. change_war_chest_gold = script value" function="effect" type="" />
  <Child name="change_war_chest_piety" scope="great_holy_war" doc="Changes the amount of piety in the war chest by the given amount. change_war_chest_piety = script value" function="effect" type="" />
  <Child name="change_war_chest_prestige" scope="great_holy_war" doc="Changes the amount of prestige in the war chest by the given amount. change_war_chest_prestige = script value" function="effect" type="" />
  <Child name="divide_war_chest" scope="great_holy_war" doc="The scoped GHW gives out its war-chest in full or in part." function="effect" type="" />
  <Child name="do_ghw_title_handout" scope="great_holy_war" type="title_and_vassal_change" doc="Hands out titles in the target kingdom to the GHW attacker beneficiaries. do_ghw_title_handout = scope:title_and_vassal_change" function="effect"  />
  <Child name="pledge_attacker" scope="great_holy_war" type="character" doc="The target character pledges themselves as an attacker in the GHW. Must be of the same faith as the GHW declarer. pledge_attacker = some character" function="effect"  />
  <Child name="pledge_defender" scope="great_holy_war" type="character" doc="The target character pledges themselves as a defender in the GHW. Must be of the same faith as the GHW target. pledge_defender = some character" function="effect" />
  <Child name="reset_designated_winner" scope="great_holy_war" doc="The GHW stops having a designated winner. reset_designated_winner = yes" function="effect" type="" />
  <Child name="set_designated_winner" scope="great_holy_war" type="character" doc="The target character becomes the designated winner of the GHW. set_designated_winner = some character" function="effect"  />
  <Child name="set_great_holy_war_target" scope="great_holy_war" doc="Sets the target of the great holy war." function="effect" type="" />
  <Child name="set_war_declarer" scope="great_holy_war" type="character" doc="The target character becomes the character that should declare war instead of the religious head. set_war_declarer = some character" function="effect" />
  <Child name="start_ghw_war" scope="great_holy_war" doc="Starts the GHW war. start_ghw_war = undirected_great_holy_war" function="effect" type="" />
  <Child name="unpledge_attacker" scope="great_holy_war" type="character" doc="The target character removes their pledge as an attacker in the GHW. unpledge_attacker = some character" function="effect"  />
  <Child name="unpledge_defender" scope="great_holy_war" type="character" doc="The target character removes their pledge as a defender in the GHW. unpledge_defender = some character" function="effect" />-->
</Schema>